<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart</title>
    <script defer src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.7/dist/chart.umd.min.js"></script>

    <style>
        canvas {
            width: 100%;
            height: 100%;
        }

        [x-cloak] {
            display: none;
        }
    </style>
</head>
<body>
    <div x-data="App" @label.window="addLabel">
        <div id="app"></div>

        <div x-cloak x-show="events.length > 0" class="mt-8 grid grid-cols-2 gap-8 px-8">
            <table class="w-full [&_tr]:border-b [&_tr]:border-slate-200 [&_th,td]:px-2 [&_td,th]:py-2">
                <thead>
                    <tr>
                        <th></th>
                        <th class="text-left">Label</th>
                        <th class="text-right">Timestamp</th>
                    </tr>
                </thead>
                <tbody>
                    <template x-for="e in events">
                        <tr>
                            <td class="text-center">
                                <button class="text-red-500 cursor-pointer" @click="removeEvent(e.t)">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </td>
                            <td class="text-left" x-text="e.label"></td>
                            <td class="text-right" x-text="e.t.substr(0, 23)"></td>
                        </tr>
                    </template>
                </tbody>
            </table>

            <!-- code -->
            <div class="flex flex-col gap-2">
                <pre class="bg-slate-800 text-slate-100 p-4 rounded text-sm overflow-x-hidden"><code x-text="fileOutput"></code></pre>
                <button class="bg-slate-800 hover:bg-slate-600 transition-colors duration-300 cursor-pointer text-slate-100 py-2 px-8 rounded ml-auto" @click.prevent="download">
                    Download labels.json
                </button>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/alpinejs" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
    <script>
        let lastLabel = ''
        const T = {{ T | to_json }}

        function percent(scale, percent) {
            const m = scale.min
            const M = scale.max
            const r = M - m

            return m + percent * r
        }

        window.charts = [{{ chart | to_json }}]
        window.charts[0].options.onClick = (event, elements) => {
            if (!event.native.shiftKey) return;

            const {x, y} = Chart.helpers.getRelativePosition(event, event.chart);
            const area = event.chart.chartArea

            if (x < area.left || x > area.right || y < area.top || y > area.bottom) return;

            const index = event.chart.scales.x.getValueForPixel(x);
            const t = T[index];
            const height = event.chart.scales.y.getValueForPixel(y);

            const label = prompt('Event label', lastLabel);

            if (label) {
                lastLabel = label;
                window.dispatchEvent(new CustomEvent("label", {detail: {label, t, height}}))
            }
        }
    </script>
    <script>
        document.addEventListener("alpine:init", () => {
            Alpine.data("App", () => ({
                charts: window.charts,
                events: {{ events | to_json }},

                get fileOutput() {
                    // kind of JSONL, but still valid JSON
                    return '[\n' + this.events.map(({label, t, height}) => '  ' + JSON.stringify({label, t, height: height.toFixed(2)})).join(',\n') + '\n]'
                },

                download() {
                    const blob = new Blob([this.fileOutput], {type: 'application/json'})
                    saveAs(blob, "labels.json")
                },

                addLabel({detail: {label, t, height}}) {
                    this.events.push({label, t, height})
                    this.updateCharts()
                },

                removeEvent(t) {
                    this.events = this.events.filter(e => e.t !== t)
                    this.updateCharts()
                },

                updateCharts() {
                    this.charts[0].options.plugins.annotation.annotations = Object.fromEntries(
                        Object.entries(this.charts[0].options.plugins.annotation.annotations)
                            .filter(([key, ann]) => !key.startsWith("event"))
                            .concat(
                                this.events.map(({label, t, height}, i) => (
                                    [
                                        `event${i}`,
                                        {
                                            type: "point",
                                            xValue: t,
                                            yValue: height,
                                            backgroundColor: "yellow",
                                            borderColor: "black",
                                            radius: 8,
                                            drawTime: "afterDraw"
                                        }
                                    ]
                                ))
                            )
                    )

                    window.dispatchEvent(new CustomEvent("updateCharts", {detail: {charts: this.charts}}))
                }
            }))
        })
    </script>
    <script>{{ asset("build/chartjs.js") }}</script>
</body>
</html>
